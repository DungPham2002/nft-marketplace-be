generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id                  Int                     @id @default(autoincrement())
  address             String                  @unique
  name                String
  avatar              String
  email               String
  description         String
  youtube             String
  facebook            String
  twitter             String
  instagram           String
  
  
  
  nftsOwned           Nft[]                  @relation("NFTsOwned")
  auctionSeller       Auction[]              @relation("AuctionSeller")
  auctionBidder       AuctionBid[]           @relation("AuctionBidder")
  userLikeNft         Nft_likes[]
  followed            Follow[]               @relation("Followed")
  follower            Follow[]               @relation("Follower")
  ownerHistory        OwnerHistory[]         @relation("OwnerHistory")
  bidderHistory       BidderHistory[]        @relation("BidderHistory")
  notification        Notification[]         @relation("Notification")
}

model Nft {
  tokenId             Int        @id @default(autoincrement())
  ownerId             Int
  collectionId        Int
  name                String
  image               String
  website             String
  price               Float
  description         String
  royalties           Int
  size                String
  isSelling           Boolean
  tokenURI            String
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now()) @updatedAt
  
  
  owner               User             @relation("NFTsOwned", fields: [ownerId], references: [id])
  collection          Collection       @relation(fields: [collectionId], references: [id])
  auction             Auction[]        @relation("NFTAuction")
  nftLikes            Nft_likes[]
  ownerHistory        OwnerHistory[]   @relation("NftOwnerHistory")
  
}

model Auction {
  id                  Int                  @id @default(autoincrement())
  nftId               Int
  sellerId            Int
  minBid              Float
  duration            Float
  isActive            Boolean
  timeEnd             DateTime
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now()) @updatedAt

  seller              User                 @relation("AuctionSeller", fields: [sellerId], references: [id])
  nft                 Nft                  @relation("NFTAuction", fields: [nftId], references: [tokenId])
  bids                AuctionBid[]         @relation("AuctionBids")
  bidderHistory       BidderHistory[]      @relation("AuctionBidderHistory")

}

model AuctionBid {
  id                  Int                  @id @default(autoincrement())
  auctionId           Int
  bidderId            Int
  bidAmount           Float
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now()) @updatedAt

  bidder              User                 @relation("AuctionBidder", fields: [bidderId], references: [id])
  auction             Auction              @relation("AuctionBids", fields: [auctionId], references: [id])
}

model Nft_likes {
  nftId               Int
  userId              Int
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now()) @updatedAt
  nft                 Nft                  @relation(fields: [nftId], references: [tokenId])
  user                User                 @relation(fields: [userId], references: [id])

  @@id([nftId, userId])
}




model Collection {
  id                  Int                  @id @default(autoincrement())
  name                String
  image               String
  nfts                Nft[]

  @@unique([name])
}



model Follow {
  followedId          Int
  followerId          Int
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now()) @updatedAt

  followed            User                 @relation("Followed", fields: [followedId], references: [id])
  follower            User                 @relation("Follower", fields: [followerId], references: [id])

  @@id([followedId, followerId])
}

model OwnerHistory {
  id                  Int                  @id @default(autoincrement())
  nftId               Int
  ownerId             Int
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now()) @updatedAt
  nft                 Nft                  @relation("NftOwnerHistory", fields: [nftId], references: [tokenId])
  owner               User                 @relation("OwnerHistory", fields: [ownerId], references: [id])
}

model BidderHistory {
  id                  Int                  @id @default(autoincrement())
  auctionId           Int
  bidderId            Int
  price               Int
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now()) @updatedAt
  auction             Auction              @relation("AuctionBidderHistory", fields: [auctionId], references: [id])
  bidder              User                 @relation("BidderHistory", fields: [bidderId], references: [id])
}

model Notification {
  id                  Int                  @id @default(autoincrement())
  userId              Int
  type                String
  avatar              String
  userAddress         String
  image               String
  message             String
  isRead              Boolean

  user                User                  @relation("Notification", fields: [userId], references: [id])
}
